****************TASK01**************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;  
};


void print_data(Node* head) {
    if (head == NULL) {
        cout << "Doubly linked list is empty" << endl;
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}


Node* at_start(Node* head, int newvalue) {
    Node* ptr = new Node();
    ptr->data = newvalue;
    ptr->next = head;
    ptr->prev = NULL;  

    if (head != NULL) {
        head->prev = ptr; 
    }
    
    head = ptr;
    return head;  
}

int main() {
    Node node1, node2, node3;
    int newvalue;

    cout << "Enter value for Node 1: ";
    cin >> node1.data;
    node1.next = &node2;
    node1.prev = NULL;  

    cout << "Enter value for Node 2: ";
    cin >> node2.data;
    node2.next = &node3;
    node2.prev = &node1; 

    cout << "Enter value for Node 3: ";
    cin >> node3.data;
    node3.next = NULL;
    node3.prev = &node2;  

    Node* head = &node1;

    cout << "Enter value for the new node to insert at the start: ";
    cin >> newvalue;
    head = at_start(head, newvalue);

    cout << "Doubly Linked List after insertion at the start: ";
    print_data(head);

    return 0;
}
################################################
**************TASK02****************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
};


void printList(Node* head) {
    if (head == NULL) {
        cout << "Doubly linked list is empty" << endl;
        return;
    }
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}


Node* deleteNodeAtPosition(Node* head, int position) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete!" << endl;
        return head;
    }

    Node* temp = head;

    
    if (position == 1) {
        head = head->next;
        if (head != NULL) {
            head->prev = NULL;
        }
        delete temp;
        return head;
    }

    
    for (int i = 1; temp != NULL && i < position; i++) {
        temp = temp->next;
    }

    
    if (temp == NULL) {
        cout << "Invalid position! No node found at position " << position << endl;
        return head;
    }

    
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    }

    delete temp; 
    return head;
}


Node* insertEnd(Node* head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        newNode->prev = NULL;
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = newNode;
    newNode->prev = temp;
    return head;
}

int main() {
    Node* head = NULL;
    int n, value, position;

    cout << "Enter number of nodes: ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        head = insertEnd(head, value);
    }

    cout << "Doubly Linked List before deletion: ";
    printList(head);

    cout << "Enter position to delete: ";
    cin >> position;
    head = deleteNodeAtPosition(head, position);

    cout << "Doubly Linked List after deletion: ";
    printList(head);

    return 0;
}
############################################
************TASK03************************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
};


void printList(Node* head) {
    if (head == NULL) {
        cout << "Doubly linked list is empty" << endl;
        return;
    }
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}


Node* deleteAtEnd(Node* head) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete!" << endl;
        return head;
    }

    Node* temp = head;

    
    if (head->next == NULL) {
        delete head;
        return NULL;
    }

   
    while (temp->next != NULL) {
        temp = temp->next;
    }

    
    temp->prev->next = NULL;
    delete temp;

    return head;
}



Node* insertEnd(Node* head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        newNode->prev = NULL;
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = newNode;
    newNode->prev = temp;
    return head;
}

int main() {
    Node* head = NULL;
    int n, value;

    cout << "Enter number of nodes: ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        head = insertEnd(head, value);
    }

    cout << "Doubly Linked List before deletion: ";
    printList(head);

    head = deleteAtEnd(head);

    cout << "Doubly Linked List after deletion: ";
    printList(head);

    return 0;
}
