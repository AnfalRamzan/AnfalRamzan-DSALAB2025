***************TASK01****************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};


void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty" << endl;
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}


Node* del_at_start(Node* head) {
    if (head == NULL) {
        cout << "Nothing to delete:" << endl;
        return head;
    }
    head = head->next;
    return head;
}

Node* del_at_position(Node* head, int position) {
    if (head == NULL) {
        cout << "The list is empty, nothing to delete." << endl;
        return head;
    }
    if (position == 1) {
        return del_at_start(head);
    }

    Node* temp = head;
    for (int i = 1; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        cout << "Invalid position! No node at position " << position << endl;
        return head;
    }

    temp->next = temp->next->next;
    return head;
}

Node* del_at_end(Node* head) {
    if (head == NULL) {
        cout << "The list is already empty, nothing to delete." << endl;
        return head;
    }
    if (head->next == NULL) {
        return NULL;
    }

    Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }

    temp->next = NULL;
    return head;
}


int main() {
    Node node1, node2, node3, node4, node5,node6;

 
    cout << "Enter value for Node 1: ";
    cin >> node1.data;
    node1.next = &node2;

    cout << "Enter value for Node 2: ";
    cin >> node2.data;
    node2.next = &node3;

    cout << "Enter value for Node 3: ";
    cin >> node3.data;
    node3.next = &node4;

    cout << "Enter value for Node 4: ";
    cin >> node4.data;
    node4.next = &node5;

   
    cout << "Enter value for Node 5: ";
    cin >> node5.data;
    node5.next = NULL;
     cout << "Enter value for Node 6: ";
    cin >> node6.data;
    node6.next = NULL;

    Node* head = &node1; 

   
    head = del_at_start(head);
    cout << "Linked list after deleting the first node: ";
    print_data(head);

   
    head = del_at_position(head, 4);
    cout << "Linked list after deleting the 4th node: ";
    print_data(head);


    head = del_at_end(head);
    cout << "Linked list after deleting the last node: ";
    print_data(head);

    return 0;
}
#############################################
*********TASK02**************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};


void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty" << endl;
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}


Node* insert_at_end(Node* head, int value) {
    Node* newNode = new Node{value, NULL}; 
    if (head == NULL) {
        return newNode; 
    }
    
    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode; 
    return head;
}


int main() {
    Node node1, node2, node3;
    
    
    cout << "Enter value for Node 1: ";
    cin >> node1.data;
    node1.next = &node2;

    cout << "Enter value for Node 2: ";
    cin >> node2.data;
    node2.next = &node3;

    cout << "Enter value for Node 3: ";
    cin >> node3.data;
    node3.next = NULL;

    Node* head = &node1; 

    cout << "Original linked list: ";
    print_data(head);

    
    int newValue;
    cout << "Enter value to insert at the end: ";
    cin >> newValue;
    head = insert_at_end(head, newValue);

    cout << "Linked list after insertion: ";
    print_data(head);

    return 0;
}
##########################################################
